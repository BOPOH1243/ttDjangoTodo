from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from keyboards.task_actions import task_actions_kb
from utils.api import get_tasks, create_task, get_categories
from datetime import datetime
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton

router = Router()

# –°–ø–∏—Å–æ–∫ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ –∑–∞–¥–∞—á–∞–º–∏
@router.message(lambda msg: msg.text == "üìã –ú–æ–∏ –∑–∞–¥–∞—á–∏")
async def list_tasks(message: Message, state: FSMContext):
    tasks = await get_tasks(message.from_user.id)
    if not tasks:
        await message.answer("–£ —Ç–µ–±—è –Ω–µ—Ç –∑–∞–¥–∞—á.")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ FSMContext
    await state.update_data(tasks=tasks)

    for idx, task in enumerate(tasks):
        text = (
            f"üìå *{task['title']}*\n"
            f"üóì –î–æ: {task['due_date']}\n"
            f"üìù {task['description'] or '‚Äî'}"
        )
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å",
                    callback_data=f"task_edit:{idx}"
                ),
                InlineKeyboardButton(
                    text="üóë –£–¥–∞–ª–∏—Ç—å",
                    callback_data=f"task_delete:{idx}"
                ),
            ]
        ])
        await message.answer(text, reply_markup=kb, parse_mode="Markdown")

# FSM-—Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏
class TaskCreation(StatesGroup):
    title = State()
    description = State()
    due_date = State()
    categories = State()
    category_idx = State()

# –ó–∞–ø—É—Å–∫ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏
@router.message(lambda msg: msg.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É")
async def cmd_add_task(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∑–∞–¥–∞—á–∏:")
    await state.set_state(TaskCreation.title)

# –í–≤–æ–¥ –∑–∞–≥–æ–ª–æ–≤–∫–∞
@router.message(TaskCreation.title)
async def process_title(message: Message, state: FSMContext):
    await state.update_data(title=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ (–∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ø—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ):")
    await state.set_state(TaskCreation.description)

# –í–≤–æ–¥ –æ–ø–∏—Å–∞–Ω–∏—è
@router.message(TaskCreation.description)
async def process_description(message: Message, state: FSMContext):
    await state.update_data(description=message.text)
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ —Å—Ä–æ–∫ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ `YYYY-MM-DD HH:MM` (–Ω–∞–ø—Ä–∏–º–µ—Ä, 2025-05-25 17:36):",
        parse_mode="Markdown"
    )
    await state.set_state(TaskCreation.due_date)

# –í–≤–æ–¥ —Å—Ä–æ–∫–∞ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è
@router.message(TaskCreation.due_date)
async def process_due_date(message: Message, state: FSMContext):
    text = message.text
    try:
        due = datetime.strptime(text, "%Y-%m-%d %H:%M")
    except ValueError:
        await message.answer(
            "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑, —Ñ–æ—Ä–º–∞—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å `YYYY-MM-DD HH:MM`."
        )
        return
    await state.update_data(due_date=due.isoformat())

    cats = await get_categories()
    if not cats:
        await message.answer("–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –°–æ–∑–¥–∞–π—Ç–µ —Å–Ω–∞—á–∞–ª–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—é.")
        await state.clear()
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(categories=cats)

    # –°—Ç—Ä–æ–∏–º inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É, –∏—Å–ø–æ–ª—å–∑—É—è –∏–Ω–¥–µ–∫—Å
    from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text=cat["name"],
                    callback_data=f"catidx:{idx}"
                )
            ]
            for idx, cat in enumerate(cats)
        ]
    )
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∑–∞–¥–∞—á–∏:", reply_markup=keyboard)
    await state.set_state(TaskCreation.category_idx)

# –í—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ —Ñ–∏–Ω–∞–ª–∏–∑–∞—Ü–∏—è
@router.callback_query(F.data.startswith("catidx:"), TaskCreation.category_idx)
async def process_category(call: CallbackQuery, state: FSMContext):
    idx = int(call.data.split(":", 1)[1])
    data = await state.get_data()
    cats = data.get("categories", [])
    if idx < 0 or idx >= len(cats):
        await call.answer("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.", show_alert=True)
        return

    cat_id = cats[idx]["id"]
    payload = {
        "title": data["title"],
        "description": data.get("description", ""),
        "due_date": data["due_date"],
        "category": cat_id,
        "telegram_user_id": call.from_user.id
    }
    task = await create_task(payload)
    await call.message.answer(
        f"‚úÖ –ó–∞–¥–∞—á–∞ *{task['title']}* —Å–æ–∑–¥–∞–Ω–∞!\n"
        f"ID: `{task['id']}`\n"
        f"–î–æ: {task['due_date']}",
        parse_mode="Markdown"
    )
    await state.clear()

# –ó–∞–≥–æ—Ç–æ–≤–∫–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ —É–¥–∞–ª–µ–Ω–∏—è
@router.callback_query(F.data.startswith("edit:"))
async def edit_task(call: CallbackQuery):
    task_id = call.data.split(":", 1)[1]
    await call.message.answer(f"–ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–¥–∞—á–∏ {task_id}")

@router.callback_query(F.data.startswith("delete:"))
async def delete_task(call: CallbackQuery):
    task_id = call.data.split(":", 1)[1]
    # TODO: –∑–∞–ø—Ä–æ—Å DELETE –∫ API
    await call.message.answer(f"–ó–∞–¥–∞—á–∞ {task_id} —É–¥–∞–ª–µ–Ω–∞ (–∏–º–∏—Ç–∞—Ü–∏—è).")
